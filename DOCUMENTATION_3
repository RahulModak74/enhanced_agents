# Enhanced Multi-Agent System Documentation
## Part 3: Usage, Examples, and Extension

## Basic Usage

### Starting the System

There are two main ways to run the system:

#### Interactive Mode

```bash
./main.py
```

This launches the command-line interface where you can enter commands directly.

#### Workflow Mode

```bash
./main.py --workflow enhanced_workflow.json
```

This executes a predefined workflow file without entering the interactive shell.

### Interactive Commands

Once in the interactive shell, you can use the following commands:

#### Creating Agents

```
> create agent1
Agent agent1 created with model deepseek/deepseek-chat:free and type standard

> create risk_analyzer gpt-4-turbo dynamic
Agent risk_analyzer created with model gpt-4-turbo and type dynamic
```

#### Running Agents

Basic agent execution:
```
> run agent1 Analyze this data and provide insights.
```

With a file input:
```
> run agent1 Analyze this CSV file [file] data.csv
```

With memory access:
```
> run agent1 Continue your previous analysis [memory:analysis_context]
```

This workflow:
1. Analyzes session logs to calculate a risk score
2. Identifies suspicious patterns based on the risk assessment
3. Dynamically selects a response strategy (block, monitor, or escalate)
4. Generates a comprehensive report summarizing the incident and response

## Extending the System

The Enhanced Multi-Agent System is designed to be modular and extensible. Here are the key ways to extend its functionality:

### Creating Custom Agent Types

You can create specialized agents by inheriting from the base `Agent` class:

```python
class SecurityAgent(Agent):
    def __init__(self, name, model=CONFIG["default_model"], memory_manager=None):
        super().__init__(name, model, memory_manager)
        self.security_context = {}
    
    def analyze_threat(self, log_content, threat_type):
        """Specialized method for threat analysis"""
        enhanced_prompt = f"Analyze this log for {threat_type} threats:\n{log_content}"
        result = self.execute(enhanced_prompt, memory_id="threat_analysis")
        return self._process_threat_data(result)
    
    def _process_threat_data(self, data):
        """Private method to process threat data"""
        # Custom processing logic
        return processed_data
```

### Adding Custom Output Formats

Extend the `OutputParser` class to handle new output formats:

```python
class EnhancedOutputParser(OutputParser):
    @staticmethod
    def extract_custom_format(text, output_format):
        """Extract a custom format from text"""
        # Custom extraction logic
        return structured_data
    
    @staticmethod
    def extract_format(text, output_format):
        """Override the original method to add new format support"""
        format_type = output_format.get("type", "text")
        
        if format_type == "custom_format":
            return EnhancedOutputParser.extract_custom_format(text, output_format)
        
        # Fall back to the parent class implementation
        return OutputParser.extract_format(text, output_format)
```

### Integrating External Services

You can extend the Agent class to incorporate external APIs or services:

```python
class APIAgent(Agent):
    def __init__(self, name, model=CONFIG["default_model"], memory_manager=None, api_key=None):
        super().__init__(name, model, memory_manager)
        self.api_key = api_key or os.environ.get("EXTERNAL_API_KEY")
        self.api_endpoint = "https://api.example.com/v1/"
    
    def execute_with_api(self, content, endpoint, params=None):
        """Execute with both LLM and external API"""
        # Get guidance from LLM
        llm_response = self.execute(content)
        
        # Call external API
        api_response = self._call_api(endpoint, params)
        
        # Combine responses
        return {
            "llm_guidance": llm_response,
            "api_data": api_response
        }
    
    def _call_api(self, endpoint, params):
        """Make an API call to the external service"""
        import requests
        headers = {"Authorization": f"Bearer {self.api_key}"}
        response = requests.get(f"{self.api_endpoint}{endpoint}", headers=headers, params=params)
        return response.json()
```

## Advanced Usage Techniques

### Chaining Multiple Memory Contexts

You can create sophisticated workflows by chaining memory contexts:

```json
[
  {
    "agent": "data_collector",
    "content": "Collect initial data points",
    "memory_id": "initial_data"
  },
  {
    "agent": "analyzer",
    "content": "Analyze the collected data",
    "readFrom": ["data_collector"],
    "memory_id": "analysis_results"
  },
  {
    "agent": "synthesizer",
    "content": "Synthesize results from both contexts",
    "memory_id": "final_synthesis",
    "readFrom": ["*"],
    "custom_prompting": "Refer to both initial_data and analysis_results contexts to create a comprehensive synthesis"
  }
]
```

### Implementing Feedback Loops

You can create iterative workflows with feedback loops:

```json
[
  {
    "agent": "initial_draft",
    "content": "Create an initial draft",
    "memory_id": "document_drafting"
  },
  {
    "agent": "reviewer",
    "content": "Review the draft and suggest improvements",
    "readFrom": ["initial_draft"],
    "memory_id": "document_drafting"
  },
  {
    "agent": "reviser",
    "content": "Implement the reviewer's suggestions",
    "readFrom": ["initial_draft", "reviewer"],
    "memory_id": "document_drafting"
  },
  {
    "agent": "final_reviewer",
    "content": "Perform a final review of the revised document",
    "readFrom": ["reviser"],
    "memory_id": "document_drafting"
  }
]
```

## Performance Considerations

When using the Enhanced Multi-Agent System, consider these performance tips:

1. **Memory Usage**: Limit the number of memories retrieved by using specific memory_ids rather than retrieving all memories.

2. **Workflow Design**: Design workflows to minimize redundant API calls by effectively using the readFrom parameter.

3. **Output Parsing**: Use structured output formats to reduce the need for parsing free-form text.

4. **Model Selection**: Choose appropriate models for each task - use more capable models for complex reasoning and simpler models for straightforward tasks.

## Conclusion

The Enhanced Multi-Agent System provides a flexible framework for orchestrating AI agents with persistent memory and dynamic behavior. By leveraging structured workflows, memory persistence, and decision-making capabilities, you can build sophisticated applications that combine the strengths of multiple specialized agents.

Whether you're implementing security analysis, data processing, content creation, or custom workflows, the system's modular architecture allows for extensive customization while maintaining a consistent interface for agent interaction and memory management.

With structured output:
```
> run agent1 Provide a risk score [format:json]
```

With reference to other agent outputs:
```
> run agent2 Improve on agent1's analysis [ref:agent1]
```

#### Accessing Memory

List all memory IDs:
```
> memory list
```

Get memories for a specific context:
```
> memory get analysis_context
```

Get memories from a specific agent:
```
> memory get analysis_context agent1
```

#### Other Commands

Get an agent's latest output:
```
> get agent1
```

List all agents:
```
> list
```

Exit the system:
```
> exit
```

## Workflow Configuration

Workflows are defined in JSON format as an array of steps. Each step represents an agent execution with various parameters.

### Basic Workflow Structure

```json
[
  {
    "agent": "agent_name",
    "content": "Prompt content for the agent",
    "file": "optional_file.csv",
    "readFrom": ["agent1", "agent2"],
    "memory_id": "context_identifier",
    "output_format": {
      "type": "json|markdown",
      "schema": {
        "field1": "type",
        "field2": "type"
      }
    }
  },
  // More steps...
]
```

### Dynamic Agent Configuration

```json
{
  "agent": "dynamic_agent",
  "type": "dynamic",
  "initial_prompt": "Make a decision based on the data...",
  "readFrom": ["agent1"],
  "memory_id": "analysis",
  "output_format": {
    "type": "json",
    "schema": {
      "action": "string",
      "reasoning": "string"
    }
  },
  "actions": {
    "option1": {
      "agent": "agent2",
      "content": "Follow-up for option 1..."
    },
    "option2": {
      "agent": "agent3",
      "content": "Follow-up for option 2..."
    }
  }
}
```
